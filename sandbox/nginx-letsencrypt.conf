events {
}

http {
  # Redirect incoming HTTP to HTTPS: https://linuxconfig.org/how-to-use-nginx-to-redirect-all-traffic-from-http-to-https
  server {
    listen 80;
    server_name _;

    location / {
      return 301 https://$host$request_uri;
    }
  }

  server {
    listen 443 ssl;
    server_name $hostname;
    
    ssl_certificate /etc/certs/fullchain.pem;
    ssl_certificate_key /etc/certs/privkey.pem;

    # Set up for good grade from SSL Labs test (https://www.ssllabs.com)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";

    # These are not supplied by certbot running standalone, but could be added if a higher SSL score
    # is desired.
    #include /etc/letsencrypt/options-ssl-nginx.conf;
    #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location /auth/ {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_pass https://keycloak:8443;
    }

    location /POD/ {
      proxy_pass http://pod:80;
      rewrite ^/POD(.*)$ $1 break;
    }

    location /Registration/ {
      proxy_pass http://registration:80;
      rewrite ^/Registration(.*)$ $1 break;
    }

    location /broker/ {
      proxy_pass http://broker:3000;
      rewrite ^/broker(.*)$ $1 break;
    }

    location / {
      proxy_pass http://registration:80;
    }
  }
}
